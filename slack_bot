#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jul  7 09:54:22 2018

@author: bogdanivtsjenko
"""

import os
import time
import re
import datetime
from slackclient import SlackClient
import reminder



def reminder(date_nr):
    date_nr = datetime.datetime.now().isocalendar()[1]
    first = list(range(28,52,4))
    second = list(range(29,52,4))
    third = list(range(30,52,4))        
    fourth = list(range(31, 52, 4))
    
    if date_nr in first:
        return ("Deze week werken we maandag, dinsdag en donderdag op WPC.")
    elif date_nr in second:
        return ("Deze week werken we maandag, dinsdag (behalve Pieter), woensdag en donderdag op WPC.")
    elif date_nr in third:
        return ("Deze week werken we maandag, dinsdag en donderdag op WPC.")
    elif date_nr in fourth:
        return ("Deze week werken we maandag, woensdag, donderdag en vrijdag (behalve John) op WPC.")    


# instantiate Slack client
token = "xoxb-395598351463-393989298849-FB3KJNSaLgaViVo3o2BVd5rB"
slack_client = SlackClient(token)
# starterbot's user ID in Slack: value is assigned after the bot starts up
starterbot_id = None

# constants
RTM_READ_DELAY = 1 # 1 second delay between reading from RTM
EXAMPLE_COMMAND = "week"
MENTION_REGEX = "^<@(|[WU].+?)>(.*)"

def parse_bot_commands(slack_events):
    """
        Parses a list of events coming from the Slack RTM API to find bot commands.
        If a bot command is found, this function returns a tuple of command and channel.
        If its not found, then this function returns None, None.
    """
    for event in slack_events:
        if event["type"] == "message" and not "subtype" in event:
            user_id, message = parse_direct_mention(event["text"])
            if user_id == starterbot_id:
                return message, event["channel"]
    return None, None

def parse_direct_mention(message_text):
    """
        Finds a direct mention (a mention that is at the beginning) in message text
        and returns the user ID which was mentioned. If there is no direct mention, returns None
    """
    matches = re.search(MENTION_REGEX, message_text)
    # the first group contains the username, the second group contains the remaining message
    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)

def handle_command(command, channel):
    """
        Executes bot command if the command is known
    """
    # Default response is help text for the user
    default_response = "Not sure what you mean. Try *{}*.".format(EXAMPLE_COMMAND)

    # Finds and executes the given command, filling in response
    response = reminder
    # This is where you start to implement more commands!
    if command.startswith(EXAMPLE_COMMAND):
        resp = reminder(date_nr)

    # Sends the response back to the channel
    slack_client.api_call(
        "chat.postMessage",
        channel=channel,
        text=resp or default_response
    )

if __name__ == "__main__":
    if slack_client.rtm_connect(with_team_state=False):
        print("Starter Bot connected and running!")
        # Read bot's user ID by calling Web API method `auth.test`
        starterbot_id = slack_client.api_call("auth.test")["user_id"]
        while True:
            command, channel = parse_bot_commands(slack_client.rtm_read())
            if command:
                handle_command(command, channel)
            time.sleep(RTM_READ_DELAY)
    else:
        print("Connection failed. Exception traceback printed above.")